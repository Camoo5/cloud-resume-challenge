
OLU’s Azure Resume             
This is my Cloud Resume Challenge built on Azure. It's a static website hosted on Azure Storage, with a visitor counter built on Azure Functions. The website is built with HTML, CSS, and JavaScript. The visitor counter is built with .NET and Azure Functions.
cloudresumechallenge 

Architecture.png (Review how to and build own using a different template)
 

Structure
•	frontend/: Folder contains the website.
o	main.js: Folder contains visitor counter code.
•	api/: Folder contains the dotnet API deployed on Azure Functions.
o	Counter.cs: Contains the visitor counter code.
•	.github/workflows/: Folder contains CI/CD workflow configurations.
•.devcontainer: Folder contains the my container configuration for VS Code.
Frontend resources
The front-end is a static site with HTML, CSS, and JavaScript. It's static and has a visitor counter. The visitor counter data fetched via an API call to an Azure Function.
•I created the site from scratch watching w3School video and a couple of YouTube videos for design ideas. It took me a few days to  put the site together and running.
•This JavaScript article explains how to fetch data from an API using the Fetch API in JavaScript. 
• My HTML resume is deployed online as an Azure Storage static website.

Backend resources
The back-end is an HTTP triggered Azure Functions with Cosmos DB input and output binding. The Function is triggered, it retrieves the CosmosDB item, adds 1 to it, and saves it and returns its value to the caller.
•Create a Cosmos DB account
•Create an HTTP triggered Azure Function in Visual Studio Code.
•Azure Functions Cosmos DB bindings
•Retrieve a Cosmos DB item with Functions binding.
•Write to a Cosmos DB item with Functions binding.
•Enable CORS with Azure Functions locally and once it's deployed to Azure for you website to be able to call it.
•Configure CORS in the Azure portal  for Azure Container Apps
Testing Resources
CI/CD Resources
•This is how you can deploy a blob storage static site with GitHub actions.
•This is how you can deploy an Azure Function to Azure with GitHub Actions.
•Implement .NET testing in GitHub Actions.

TO DO
•Implement tests into CICD.
•Create IaC files.
•Improve tests and tests documentation.

ProductionAPIUrl: https://oluwoleokanlawon.com.
